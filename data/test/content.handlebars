<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="stylesheet" href="styles.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />

  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap" rel="stylesheet" />

  <script src="https://unpkg.com/@jsreport/browser-client/dist/jsreport.umd.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
  <script src="https://www.unpkg.com/suncalc@1.9.0/suncalc.js"></script>
  <script src="https://unpkg.com/osmtogeojson/osmtogeojson.js"></script>
  <script src="https://unpkg.com/leaflet-shadow-simulator/dist/leaflet-shadow-simulator.umd.min.js"></script>
</head>

<body>
  <div class="px-4">

    <div id="sunlight-map" style="width:100%;height:280px; margin-bottom: 20px"></div>

    <script>
      try {
        const map = L.map("sunlight-map", {
          zoomControl: false
        }).setView([46.20111914696285, 6.1484776575582], 18);
        
        L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: '',
          maxZoom: 18,
        }).addTo(map);

        const shadeMap = new ShadeMap({
          date: new Date(), // display shadows for current date
          color: '#01112f', // shade color
          opacity: 0.7, // opacity of shade color
          apiKey: 'eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRwcGlvdHJvd3NraUBzaGFkZW1hcC5hcHAiLCJjcmVhdGVkIjoxNjYyNDkzMDY2Nzk0LCJpYXQiOjE2NjI0OTMwNjZ9.ovCrLTYsdKFTF6TW3DuODxCaAtGQ3qhcmqj3DWcol5g',
          terrainSource: {
            tileSize: 256, // DEM tile size
            maxZoom: 15, // Maximum zoom of DEM tile set
            getSourceUrl: ({
              x,
              y,
              z
            }) => `https://s3.amazonaws.com/elevation-tiles-prod/terrarium/${z}/${x}/${y}.png`,
            getElevation: ({
              r,
              g,
              b,
              a
            }) => (r * 256 + g + b / 256) - 32768,
          },
          getFeatures: async () => {
            try {
              if (map.getZoom() > 15) {
                const bounds = map.getBounds();
                const north = bounds.getNorth();
                const south = bounds.getSouth();
                const east = bounds.getEast();
                const west = bounds.getWest();
                const query = `https://overpass-api.de/api/interpreter?data=%2F*%0AThis%20has%20been%20generated%20by%20the%20overpass-turbo%20wizard.%0AThe%20original%20search%20was%3A%0A%E2%80%9Cbuilding%E2%80%9D%0A*%2F%0A%5Bout%3Ajson%5D%5Btimeout%3A25%5D%3B%0A%2F%2F%20gather%20results%0A%28%0A%20%20%2F%2F%20query%20part%20for%3A%20%E2%80%9Cbuilding%E2%80%9D%0A%20%20way%5B%22building%22%5D%28${south}%2C${west}%2C${north}%2C${east}%29%3B%0A%29%3B%0A%2F%2F%20print%20results%0Aout%20body%3B%0A%3E%3B%0Aout%20skel%20qt%3B`;
                const response = await fetch(query)
                const json = await response.json();
                const geojson = osmtogeojson(json);
                // If no building height, default to one storey of 3 meters
                geojson.features.forEach(feature => {
                  if (!feature.properties) {
                    feature.properties = {};
                  }
                  if (!feature.properties.height) {
                    feature.properties.height = 3;
                  }
                });
                return geojson.features;
              }
            } catch (e) {
              console.error(e);
            }
            return [];
          },
        }).addTo(map);
        let now = new Date(1633358583454);
        const {
          sunrise,
          sunset
        } = SunCalc.getTimes(now, 46.20111914696285, 6.1484776575582);
        shadeMap.setSunExposure(true, {
          startDate: sunrise,
          endDate: sunset
        });
      } catch (error) {
        console.error("Error name:", error.name);
        console.error("Error message:", error.message);
        console.error("Error stack:", error.stack);
      }
    </script>
    <script>
        setTimeout(() => {
            window.JSREPORT_READY_TO_START = true;
        }, 6000);
    </script>
  </div>
</body>

</html>